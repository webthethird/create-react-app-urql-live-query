schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Activity {
  id: ID!
  market: Market!
  user: User!
  type: String!
  size: BigInt
  notional: BigInt
  price: BigInt
  pnl: BigInt
  fees: BigInt
  timestamp: BigInt!
  isTrader: Boolean!
}

input Activity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  notional: BigInt
  notional_not: BigInt
  notional_gt: BigInt
  notional_lt: BigInt
  notional_gte: BigInt
  notional_lte: BigInt
  notional_in: [BigInt!]
  notional_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  pnl: BigInt
  pnl_not: BigInt
  pnl_gt: BigInt
  pnl_lt: BigInt
  pnl_gte: BigInt
  pnl_lte: BigInt
  pnl_in: [BigInt!]
  pnl_not_in: [BigInt!]
  fees: BigInt
  fees_not: BigInt
  fees_gt: BigInt
  fees_lt: BigInt
  fees_gte: BigInt
  fees_lte: BigInt
  fees_in: [BigInt!]
  fees_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  isTrader: Boolean
  isTrader_not: Boolean
  isTrader_in: [Boolean!]
  isTrader_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Activity_filter]
  or: [Activity_filter]
}

enum Activity_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  type
  size
  notional
  price
  pnl
  fees
  timestamp
  isTrader
}

enum Aggregation_interval {
  hour
  day
}

type AnswerUpdated {
  id: ID!
  token: Token!
  decimals: BigInt!
  timestamp: BigInt!
  answer: BigInt!
}

input AnswerUpdated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  answer: BigInt
  answer_not: BigInt
  answer_gt: BigInt
  answer_lt: BigInt
  answer_gte: BigInt
  answer_lte: BigInt
  answer_in: [BigInt!]
  answer_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AnswerUpdated_filter]
  or: [AnswerUpdated_filter]
}

enum AnswerUpdated_orderBy {
  id
  token
  token__id
  token__address
  token__name
  token__symbol
  token__aggregator
  token__decimals
  token__weight
  token__maxAmount
  token__depositedAmount
  token__uniqueDepositors
  decimals
  timestamp
  answer
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CurrentLpPosition {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  openNotional: BigInt!
  positionSize: BigInt!
  initialCumFundingPerLpToken: BigInt!
  recentCumFundingPerLpToken: BigInt!
  weightedEntryPriceSum: BigInt!
  entryAmountSum: BigInt!
  weightedExitPriceSum: BigInt!
  exitAmountSum: BigInt!
  liquidityBalance: BigInt!
  totalTradingFeesGrowth: BigInt!
  totalQuoteFeesGrowth: BigInt!
  totalBaseFeesGrowth: BigInt!
  depositTime: BigInt!
  realizedProfit: BigInt!
  fundingPayment: BigInt!
  tradingFeesPayed: BigInt!
  initialUsdValue: BigInt!
}

input CurrentLpPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  openNotional: BigInt
  openNotional_not: BigInt
  openNotional_gt: BigInt
  openNotional_lt: BigInt
  openNotional_gte: BigInt
  openNotional_lte: BigInt
  openNotional_in: [BigInt!]
  openNotional_not_in: [BigInt!]
  positionSize: BigInt
  positionSize_not: BigInt
  positionSize_gt: BigInt
  positionSize_lt: BigInt
  positionSize_gte: BigInt
  positionSize_lte: BigInt
  positionSize_in: [BigInt!]
  positionSize_not_in: [BigInt!]
  initialCumFundingPerLpToken: BigInt
  initialCumFundingPerLpToken_not: BigInt
  initialCumFundingPerLpToken_gt: BigInt
  initialCumFundingPerLpToken_lt: BigInt
  initialCumFundingPerLpToken_gte: BigInt
  initialCumFundingPerLpToken_lte: BigInt
  initialCumFundingPerLpToken_in: [BigInt!]
  initialCumFundingPerLpToken_not_in: [BigInt!]
  recentCumFundingPerLpToken: BigInt
  recentCumFundingPerLpToken_not: BigInt
  recentCumFundingPerLpToken_gt: BigInt
  recentCumFundingPerLpToken_lt: BigInt
  recentCumFundingPerLpToken_gte: BigInt
  recentCumFundingPerLpToken_lte: BigInt
  recentCumFundingPerLpToken_in: [BigInt!]
  recentCumFundingPerLpToken_not_in: [BigInt!]
  weightedEntryPriceSum: BigInt
  weightedEntryPriceSum_not: BigInt
  weightedEntryPriceSum_gt: BigInt
  weightedEntryPriceSum_lt: BigInt
  weightedEntryPriceSum_gte: BigInt
  weightedEntryPriceSum_lte: BigInt
  weightedEntryPriceSum_in: [BigInt!]
  weightedEntryPriceSum_not_in: [BigInt!]
  entryAmountSum: BigInt
  entryAmountSum_not: BigInt
  entryAmountSum_gt: BigInt
  entryAmountSum_lt: BigInt
  entryAmountSum_gte: BigInt
  entryAmountSum_lte: BigInt
  entryAmountSum_in: [BigInt!]
  entryAmountSum_not_in: [BigInt!]
  weightedExitPriceSum: BigInt
  weightedExitPriceSum_not: BigInt
  weightedExitPriceSum_gt: BigInt
  weightedExitPriceSum_lt: BigInt
  weightedExitPriceSum_gte: BigInt
  weightedExitPriceSum_lte: BigInt
  weightedExitPriceSum_in: [BigInt!]
  weightedExitPriceSum_not_in: [BigInt!]
  exitAmountSum: BigInt
  exitAmountSum_not: BigInt
  exitAmountSum_gt: BigInt
  exitAmountSum_lt: BigInt
  exitAmountSum_gte: BigInt
  exitAmountSum_lte: BigInt
  exitAmountSum_in: [BigInt!]
  exitAmountSum_not_in: [BigInt!]
  liquidityBalance: BigInt
  liquidityBalance_not: BigInt
  liquidityBalance_gt: BigInt
  liquidityBalance_lt: BigInt
  liquidityBalance_gte: BigInt
  liquidityBalance_lte: BigInt
  liquidityBalance_in: [BigInt!]
  liquidityBalance_not_in: [BigInt!]
  totalTradingFeesGrowth: BigInt
  totalTradingFeesGrowth_not: BigInt
  totalTradingFeesGrowth_gt: BigInt
  totalTradingFeesGrowth_lt: BigInt
  totalTradingFeesGrowth_gte: BigInt
  totalTradingFeesGrowth_lte: BigInt
  totalTradingFeesGrowth_in: [BigInt!]
  totalTradingFeesGrowth_not_in: [BigInt!]
  totalQuoteFeesGrowth: BigInt
  totalQuoteFeesGrowth_not: BigInt
  totalQuoteFeesGrowth_gt: BigInt
  totalQuoteFeesGrowth_lt: BigInt
  totalQuoteFeesGrowth_gte: BigInt
  totalQuoteFeesGrowth_lte: BigInt
  totalQuoteFeesGrowth_in: [BigInt!]
  totalQuoteFeesGrowth_not_in: [BigInt!]
  totalBaseFeesGrowth: BigInt
  totalBaseFeesGrowth_not: BigInt
  totalBaseFeesGrowth_gt: BigInt
  totalBaseFeesGrowth_lt: BigInt
  totalBaseFeesGrowth_gte: BigInt
  totalBaseFeesGrowth_lte: BigInt
  totalBaseFeesGrowth_in: [BigInt!]
  totalBaseFeesGrowth_not_in: [BigInt!]
  depositTime: BigInt
  depositTime_not: BigInt
  depositTime_gt: BigInt
  depositTime_lt: BigInt
  depositTime_gte: BigInt
  depositTime_lte: BigInt
  depositTime_in: [BigInt!]
  depositTime_not_in: [BigInt!]
  realizedProfit: BigInt
  realizedProfit_not: BigInt
  realizedProfit_gt: BigInt
  realizedProfit_lt: BigInt
  realizedProfit_gte: BigInt
  realizedProfit_lte: BigInt
  realizedProfit_in: [BigInt!]
  realizedProfit_not_in: [BigInt!]
  fundingPayment: BigInt
  fundingPayment_not: BigInt
  fundingPayment_gt: BigInt
  fundingPayment_lt: BigInt
  fundingPayment_gte: BigInt
  fundingPayment_lte: BigInt
  fundingPayment_in: [BigInt!]
  fundingPayment_not_in: [BigInt!]
  tradingFeesPayed: BigInt
  tradingFeesPayed_not: BigInt
  tradingFeesPayed_gt: BigInt
  tradingFeesPayed_lt: BigInt
  tradingFeesPayed_gte: BigInt
  tradingFeesPayed_lte: BigInt
  tradingFeesPayed_in: [BigInt!]
  tradingFeesPayed_not_in: [BigInt!]
  initialUsdValue: BigInt
  initialUsdValue_not: BigInt
  initialUsdValue_gt: BigInt
  initialUsdValue_lt: BigInt
  initialUsdValue_gte: BigInt
  initialUsdValue_lte: BigInt
  initialUsdValue_in: [BigInt!]
  initialUsdValue_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrentLpPosition_filter]
  or: [CurrentLpPosition_filter]
}

enum CurrentLpPosition_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  openNotional
  positionSize
  initialCumFundingPerLpToken
  recentCumFundingPerLpToken
  weightedEntryPriceSum
  entryAmountSum
  weightedExitPriceSum
  exitAmountSum
  liquidityBalance
  totalTradingFeesGrowth
  totalQuoteFeesGrowth
  totalBaseFeesGrowth
  depositTime
  realizedProfit
  fundingPayment
  tradingFeesPayed
  initialUsdValue
}

type CurrentPosition {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  direction: Int!
  marginRatio: BigInt!
  openNotional: BigInt!
  positionSize: BigInt!
  initialCumFundingRate: BigInt!
  recentCumFundingRate: BigInt!
  entryPrice: BigInt!
  realizedProfit: BigInt!
  insuranceFeesPayed: BigInt!
  tradingFeesPayed: BigInt!
  fundingPayment: BigInt!
}

input CurrentPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  direction: Int
  direction_not: Int
  direction_gt: Int
  direction_lt: Int
  direction_gte: Int
  direction_lte: Int
  direction_in: [Int!]
  direction_not_in: [Int!]
  marginRatio: BigInt
  marginRatio_not: BigInt
  marginRatio_gt: BigInt
  marginRatio_lt: BigInt
  marginRatio_gte: BigInt
  marginRatio_lte: BigInt
  marginRatio_in: [BigInt!]
  marginRatio_not_in: [BigInt!]
  openNotional: BigInt
  openNotional_not: BigInt
  openNotional_gt: BigInt
  openNotional_lt: BigInt
  openNotional_gte: BigInt
  openNotional_lte: BigInt
  openNotional_in: [BigInt!]
  openNotional_not_in: [BigInt!]
  positionSize: BigInt
  positionSize_not: BigInt
  positionSize_gt: BigInt
  positionSize_lt: BigInt
  positionSize_gte: BigInt
  positionSize_lte: BigInt
  positionSize_in: [BigInt!]
  positionSize_not_in: [BigInt!]
  initialCumFundingRate: BigInt
  initialCumFundingRate_not: BigInt
  initialCumFundingRate_gt: BigInt
  initialCumFundingRate_lt: BigInt
  initialCumFundingRate_gte: BigInt
  initialCumFundingRate_lte: BigInt
  initialCumFundingRate_in: [BigInt!]
  initialCumFundingRate_not_in: [BigInt!]
  recentCumFundingRate: BigInt
  recentCumFundingRate_not: BigInt
  recentCumFundingRate_gt: BigInt
  recentCumFundingRate_lt: BigInt
  recentCumFundingRate_gte: BigInt
  recentCumFundingRate_lte: BigInt
  recentCumFundingRate_in: [BigInt!]
  recentCumFundingRate_not_in: [BigInt!]
  entryPrice: BigInt
  entryPrice_not: BigInt
  entryPrice_gt: BigInt
  entryPrice_lt: BigInt
  entryPrice_gte: BigInt
  entryPrice_lte: BigInt
  entryPrice_in: [BigInt!]
  entryPrice_not_in: [BigInt!]
  realizedProfit: BigInt
  realizedProfit_not: BigInt
  realizedProfit_gt: BigInt
  realizedProfit_lt: BigInt
  realizedProfit_gte: BigInt
  realizedProfit_lte: BigInt
  realizedProfit_in: [BigInt!]
  realizedProfit_not_in: [BigInt!]
  insuranceFeesPayed: BigInt
  insuranceFeesPayed_not: BigInt
  insuranceFeesPayed_gt: BigInt
  insuranceFeesPayed_lt: BigInt
  insuranceFeesPayed_gte: BigInt
  insuranceFeesPayed_lte: BigInt
  insuranceFeesPayed_in: [BigInt!]
  insuranceFeesPayed_not_in: [BigInt!]
  tradingFeesPayed: BigInt
  tradingFeesPayed_not: BigInt
  tradingFeesPayed_gt: BigInt
  tradingFeesPayed_lt: BigInt
  tradingFeesPayed_gte: BigInt
  tradingFeesPayed_lte: BigInt
  tradingFeesPayed_in: [BigInt!]
  tradingFeesPayed_not_in: [BigInt!]
  fundingPayment: BigInt
  fundingPayment_not: BigInt
  fundingPayment_gt: BigInt
  fundingPayment_lt: BigInt
  fundingPayment_gte: BigInt
  fundingPayment_lte: BigInt
  fundingPayment_in: [BigInt!]
  fundingPayment_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrentPosition_filter]
  or: [CurrentPosition_filter]
}

enum CurrentPosition_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  direction
  marginRatio
  openNotional
  positionSize
  initialCumFundingRate
  recentCumFundingRate
  entryPrice
  realizedProfit
  insuranceFeesPayed
  tradingFeesPayed
  fundingPayment
}

type CurrentTokenBalance {
  id: ID!
  user: User!
  token: Token!
  amount: BigInt!
  timestamp: BigInt!
}

input CurrentTokenBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrentTokenBalance_filter]
  or: [CurrentTokenBalance_filter]
}

enum CurrentTokenBalance_orderBy {
  id
  user
  user__id
  user__tradingVolume
  token
  token__id
  token__address
  token__name
  token__symbol
  token__aggregator
  token__decimals
  token__weight
  token__maxAmount
  token__depositedAmount
  token__uniqueDepositors
  amount
  timestamp
}

type DailyCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input DailyCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DailyCandle_filter]
  or: [DailyCandle_filter]
}

enum DailyCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

type FifteenMinuteCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input FifteenMinuteCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FifteenMinuteCandle_filter]
  or: [FifteenMinuteCandle_filter]
}

enum FifteenMinuteCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

type FundingPayment {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  amount: BigInt!
  isTrader: Boolean!
}

input FundingPayment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  isTrader: Boolean
  isTrader_not: Boolean
  isTrader_in: [Boolean!]
  isTrader_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FundingPayment_filter]
  or: [FundingPayment_filter]
}

enum FundingPayment_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  amount
  isTrader
}

type GlobalMetricStore {
  id: ID!
  userCount: BigInt!
}

input GlobalMetricStore_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlobalMetricStore_filter]
  or: [GlobalMetricStore_filter]
}

enum GlobalMetricStore_orderBy {
  id
  userCount
}

type GlobalPosition {
  id: ID!
  market: Market!
  timestamp: BigInt!
  timeOfLastTrade: BigInt!
  timeOfLastTwapUpdate: BigInt!
  cumFundingRate: BigInt!
  totalQuoteProvided: BigInt!
  totalBaseProvided: BigInt!
  cumFundingPerLpToken: BigInt!
  currentBlockTradeAmount: BigInt!
  totalTradingFeesGrowth: BigInt!
  totalLiquidityProvided: BigInt!
  totalBaseFeesGrowth: BigInt!
  totalQuoteFeesGrowth: BigInt!
  traderLongs: BigInt!
  traderShorts: BigInt!
}

type GlobalPositionHourlyAggregate {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  cumFundingRate: BigInt!
  totalQuoteProvided: BigInt!
  totalBaseProvided: BigInt!
  cumFundingPerLpToken: BigInt!
  totalTradingFeesGrowth: BigInt!
  totalLiquidityProvided: BigInt!
  totalBaseFeesGrowth: BigInt!
  totalQuoteFeesGrowth: BigInt!
}

input GlobalPositionHourlyAggregate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  cumFundingRate: BigInt
  cumFundingRate_not: BigInt
  cumFundingRate_gt: BigInt
  cumFundingRate_lt: BigInt
  cumFundingRate_gte: BigInt
  cumFundingRate_lte: BigInt
  cumFundingRate_in: [BigInt!]
  cumFundingRate_not_in: [BigInt!]
  totalQuoteProvided: BigInt
  totalQuoteProvided_not: BigInt
  totalQuoteProvided_gt: BigInt
  totalQuoteProvided_lt: BigInt
  totalQuoteProvided_gte: BigInt
  totalQuoteProvided_lte: BigInt
  totalQuoteProvided_in: [BigInt!]
  totalQuoteProvided_not_in: [BigInt!]
  totalBaseProvided: BigInt
  totalBaseProvided_not: BigInt
  totalBaseProvided_gt: BigInt
  totalBaseProvided_lt: BigInt
  totalBaseProvided_gte: BigInt
  totalBaseProvided_lte: BigInt
  totalBaseProvided_in: [BigInt!]
  totalBaseProvided_not_in: [BigInt!]
  cumFundingPerLpToken: BigInt
  cumFundingPerLpToken_not: BigInt
  cumFundingPerLpToken_gt: BigInt
  cumFundingPerLpToken_lt: BigInt
  cumFundingPerLpToken_gte: BigInt
  cumFundingPerLpToken_lte: BigInt
  cumFundingPerLpToken_in: [BigInt!]
  cumFundingPerLpToken_not_in: [BigInt!]
  totalTradingFeesGrowth: BigInt
  totalTradingFeesGrowth_not: BigInt
  totalTradingFeesGrowth_gt: BigInt
  totalTradingFeesGrowth_lt: BigInt
  totalTradingFeesGrowth_gte: BigInt
  totalTradingFeesGrowth_lte: BigInt
  totalTradingFeesGrowth_in: [BigInt!]
  totalTradingFeesGrowth_not_in: [BigInt!]
  totalLiquidityProvided: BigInt
  totalLiquidityProvided_not: BigInt
  totalLiquidityProvided_gt: BigInt
  totalLiquidityProvided_lt: BigInt
  totalLiquidityProvided_gte: BigInt
  totalLiquidityProvided_lte: BigInt
  totalLiquidityProvided_in: [BigInt!]
  totalLiquidityProvided_not_in: [BigInt!]
  totalBaseFeesGrowth: BigInt
  totalBaseFeesGrowth_not: BigInt
  totalBaseFeesGrowth_gt: BigInt
  totalBaseFeesGrowth_lt: BigInt
  totalBaseFeesGrowth_gte: BigInt
  totalBaseFeesGrowth_lte: BigInt
  totalBaseFeesGrowth_in: [BigInt!]
  totalBaseFeesGrowth_not_in: [BigInt!]
  totalQuoteFeesGrowth: BigInt
  totalQuoteFeesGrowth_not: BigInt
  totalQuoteFeesGrowth_gt: BigInt
  totalQuoteFeesGrowth_lt: BigInt
  totalQuoteFeesGrowth_gte: BigInt
  totalQuoteFeesGrowth_lte: BigInt
  totalQuoteFeesGrowth_in: [BigInt!]
  totalQuoteFeesGrowth_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlobalPositionHourlyAggregate_filter]
  or: [GlobalPositionHourlyAggregate_filter]
}

enum GlobalPositionHourlyAggregate_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  cumFundingRate
  totalQuoteProvided
  totalBaseProvided
  cumFundingPerLpToken
  totalTradingFeesGrowth
  totalLiquidityProvided
  totalBaseFeesGrowth
  totalQuoteFeesGrowth
}

input GlobalPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  timeOfLastTrade: BigInt
  timeOfLastTrade_not: BigInt
  timeOfLastTrade_gt: BigInt
  timeOfLastTrade_lt: BigInt
  timeOfLastTrade_gte: BigInt
  timeOfLastTrade_lte: BigInt
  timeOfLastTrade_in: [BigInt!]
  timeOfLastTrade_not_in: [BigInt!]
  timeOfLastTwapUpdate: BigInt
  timeOfLastTwapUpdate_not: BigInt
  timeOfLastTwapUpdate_gt: BigInt
  timeOfLastTwapUpdate_lt: BigInt
  timeOfLastTwapUpdate_gte: BigInt
  timeOfLastTwapUpdate_lte: BigInt
  timeOfLastTwapUpdate_in: [BigInt!]
  timeOfLastTwapUpdate_not_in: [BigInt!]
  cumFundingRate: BigInt
  cumFundingRate_not: BigInt
  cumFundingRate_gt: BigInt
  cumFundingRate_lt: BigInt
  cumFundingRate_gte: BigInt
  cumFundingRate_lte: BigInt
  cumFundingRate_in: [BigInt!]
  cumFundingRate_not_in: [BigInt!]
  totalQuoteProvided: BigInt
  totalQuoteProvided_not: BigInt
  totalQuoteProvided_gt: BigInt
  totalQuoteProvided_lt: BigInt
  totalQuoteProvided_gte: BigInt
  totalQuoteProvided_lte: BigInt
  totalQuoteProvided_in: [BigInt!]
  totalQuoteProvided_not_in: [BigInt!]
  totalBaseProvided: BigInt
  totalBaseProvided_not: BigInt
  totalBaseProvided_gt: BigInt
  totalBaseProvided_lt: BigInt
  totalBaseProvided_gte: BigInt
  totalBaseProvided_lte: BigInt
  totalBaseProvided_in: [BigInt!]
  totalBaseProvided_not_in: [BigInt!]
  cumFundingPerLpToken: BigInt
  cumFundingPerLpToken_not: BigInt
  cumFundingPerLpToken_gt: BigInt
  cumFundingPerLpToken_lt: BigInt
  cumFundingPerLpToken_gte: BigInt
  cumFundingPerLpToken_lte: BigInt
  cumFundingPerLpToken_in: [BigInt!]
  cumFundingPerLpToken_not_in: [BigInt!]
  currentBlockTradeAmount: BigInt
  currentBlockTradeAmount_not: BigInt
  currentBlockTradeAmount_gt: BigInt
  currentBlockTradeAmount_lt: BigInt
  currentBlockTradeAmount_gte: BigInt
  currentBlockTradeAmount_lte: BigInt
  currentBlockTradeAmount_in: [BigInt!]
  currentBlockTradeAmount_not_in: [BigInt!]
  totalTradingFeesGrowth: BigInt
  totalTradingFeesGrowth_not: BigInt
  totalTradingFeesGrowth_gt: BigInt
  totalTradingFeesGrowth_lt: BigInt
  totalTradingFeesGrowth_gte: BigInt
  totalTradingFeesGrowth_lte: BigInt
  totalTradingFeesGrowth_in: [BigInt!]
  totalTradingFeesGrowth_not_in: [BigInt!]
  totalLiquidityProvided: BigInt
  totalLiquidityProvided_not: BigInt
  totalLiquidityProvided_gt: BigInt
  totalLiquidityProvided_lt: BigInt
  totalLiquidityProvided_gte: BigInt
  totalLiquidityProvided_lte: BigInt
  totalLiquidityProvided_in: [BigInt!]
  totalLiquidityProvided_not_in: [BigInt!]
  totalBaseFeesGrowth: BigInt
  totalBaseFeesGrowth_not: BigInt
  totalBaseFeesGrowth_gt: BigInt
  totalBaseFeesGrowth_lt: BigInt
  totalBaseFeesGrowth_gte: BigInt
  totalBaseFeesGrowth_lte: BigInt
  totalBaseFeesGrowth_in: [BigInt!]
  totalBaseFeesGrowth_not_in: [BigInt!]
  totalQuoteFeesGrowth: BigInt
  totalQuoteFeesGrowth_not: BigInt
  totalQuoteFeesGrowth_gt: BigInt
  totalQuoteFeesGrowth_lt: BigInt
  totalQuoteFeesGrowth_gte: BigInt
  totalQuoteFeesGrowth_lte: BigInt
  totalQuoteFeesGrowth_in: [BigInt!]
  totalQuoteFeesGrowth_not_in: [BigInt!]
  traderLongs: BigInt
  traderLongs_not: BigInt
  traderLongs_gt: BigInt
  traderLongs_lt: BigInt
  traderLongs_gte: BigInt
  traderLongs_lte: BigInt
  traderLongs_in: [BigInt!]
  traderLongs_not_in: [BigInt!]
  traderShorts: BigInt
  traderShorts_not: BigInt
  traderShorts_gt: BigInt
  traderShorts_lt: BigInt
  traderShorts_gte: BigInt
  traderShorts_lte: BigInt
  traderShorts_in: [BigInt!]
  traderShorts_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlobalPosition_filter]
  or: [GlobalPosition_filter]
}

enum GlobalPosition_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  timestamp
  timeOfLastTrade
  timeOfLastTwapUpdate
  cumFundingRate
  totalQuoteProvided
  totalBaseProvided
  cumFundingPerLpToken
  currentBlockTradeAmount
  totalTradingFeesGrowth
  totalLiquidityProvided
  totalBaseFeesGrowth
  totalQuoteFeesGrowth
  traderLongs
  traderShorts
}

type HourlyCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input HourlyCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HourlyCandle_filter]
  or: [HourlyCandle_filter]
}

enum HourlyCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

"""
8 bytes signed integer

"""
scalar Int8

type Liquidation {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  liquidatee: User!
  profit: BigInt!
  isTrader: Boolean!
  pastPosition: PastPosition
  pastLpPosition: PastLpPosition
}

input Liquidation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidatee: String
  liquidatee_not: String
  liquidatee_gt: String
  liquidatee_lt: String
  liquidatee_gte: String
  liquidatee_lte: String
  liquidatee_in: [String!]
  liquidatee_not_in: [String!]
  liquidatee_contains: String
  liquidatee_contains_nocase: String
  liquidatee_not_contains: String
  liquidatee_not_contains_nocase: String
  liquidatee_starts_with: String
  liquidatee_starts_with_nocase: String
  liquidatee_not_starts_with: String
  liquidatee_not_starts_with_nocase: String
  liquidatee_ends_with: String
  liquidatee_ends_with_nocase: String
  liquidatee_not_ends_with: String
  liquidatee_not_ends_with_nocase: String
  liquidatee_: User_filter
  profit: BigInt
  profit_not: BigInt
  profit_gt: BigInt
  profit_lt: BigInt
  profit_gte: BigInt
  profit_lte: BigInt
  profit_in: [BigInt!]
  profit_not_in: [BigInt!]
  isTrader: Boolean
  isTrader_not: Boolean
  isTrader_in: [Boolean!]
  isTrader_not_in: [Boolean!]
  pastPosition: String
  pastPosition_not: String
  pastPosition_gt: String
  pastPosition_lt: String
  pastPosition_gte: String
  pastPosition_lte: String
  pastPosition_in: [String!]
  pastPosition_not_in: [String!]
  pastPosition_contains: String
  pastPosition_contains_nocase: String
  pastPosition_not_contains: String
  pastPosition_not_contains_nocase: String
  pastPosition_starts_with: String
  pastPosition_starts_with_nocase: String
  pastPosition_not_starts_with: String
  pastPosition_not_starts_with_nocase: String
  pastPosition_ends_with: String
  pastPosition_ends_with_nocase: String
  pastPosition_not_ends_with: String
  pastPosition_not_ends_with_nocase: String
  pastPosition_: PastPosition_filter
  pastLpPosition: String
  pastLpPosition_not: String
  pastLpPosition_gt: String
  pastLpPosition_lt: String
  pastLpPosition_gte: String
  pastLpPosition_lte: String
  pastLpPosition_in: [String!]
  pastLpPosition_not_in: [String!]
  pastLpPosition_contains: String
  pastLpPosition_contains_nocase: String
  pastLpPosition_not_contains: String
  pastLpPosition_not_contains_nocase: String
  pastLpPosition_starts_with: String
  pastLpPosition_starts_with_nocase: String
  pastLpPosition_not_starts_with: String
  pastLpPosition_not_starts_with_nocase: String
  pastLpPosition_ends_with: String
  pastLpPosition_ends_with_nocase: String
  pastLpPosition_not_ends_with: String
  pastLpPosition_not_ends_with_nocase: String
  pastLpPosition_: PastLpPosition_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Liquidation_filter]
  or: [Liquidation_filter]
}

enum Liquidation_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  liquidatee
  liquidatee__id
  liquidatee__tradingVolume
  profit
  isTrader
  pastPosition
  pastPosition__id
  pastPosition__timestamp
  pastPosition__closeTimestamp
  pastPosition__direction
  pastPosition__marginRatio
  pastPosition__openNotional
  pastPosition__positionSize
  pastPosition__initialCumFundingRate
  pastPosition__entryPrice
  pastPosition__wasLiquidated
  pastPosition__liquidationFee
  pastPosition__realizedProfit
  pastPosition__insurancePayed
  pastPosition__tradingFeesPayed
  pastPosition__fundingPayment
  pastLpPosition
  pastLpPosition__id
  pastLpPosition__timestamp
  pastLpPosition__closeTimestamp
  pastLpPosition__openNotional
  pastLpPosition__positionSize
  pastLpPosition__initialCumFundingPerLpToken
  pastLpPosition__weightedEntryPriceSum
  pastLpPosition__entryAmountSum
  pastLpPosition__weightedExitPriceSum
  pastLpPosition__exitAmountSum
  pastLpPosition__liquidityBalance
  pastLpPosition__totalTradingFeesGrowth
  pastLpPosition__totalQuoteFeesGrowth
  pastLpPosition__totalBaseFeesGrowth
  pastLpPosition__depositTime
  pastLpPosition__realizedProfit
  pastLpPosition__wasLiquidated
  pastLpPosition__liquidationFee
  pastLpPosition__fundingPayment
  pastLpPosition__tradingFeesPayed
  pastLpPosition__initialUsdValue
}

type Market {
  id: ID!
  perpetual: Bytes!
  cryptoSwapPool: Bytes!
  vaultAddress: Bytes!
  minMargin: BigInt!
  minMarginAtCreation: BigInt!
  minPositiveOpenNotional: BigInt!
  liquidationReward: BigInt!
  insuranceRatio: BigInt!
  liquidationRewardInsuranceShare: BigInt!
  liquidationDiscount: BigInt!
  nonUACollSeizureDiscount: BigInt!
  uaDebtSeizureThreshold: BigInt!
  riskWeight: BigInt!
  maxLiquidityProvided: BigInt!
  twapFrequency: BigInt!
  sensitivity: BigInt!
  maxBlockTradeAmount: BigInt!
  insuranceFee: BigInt!
  lpDebtCoef: BigInt!
  lockPeriod: BigInt!
  midFee: BigInt!
  outFee: BigInt!
  name: String!
  symbol: String!
  latestPrice: Price!
  earliestPrice: BigInt!
  globalPositions(skip: Int = 0, first: Int = 100, orderBy: GlobalPosition_orderBy, orderDirection: OrderDirection, where: GlobalPosition_filter): [GlobalPosition!]
  globalPositionHourlyAggregates(skip: Int = 0, first: Int = 100, orderBy: GlobalPositionHourlyAggregate_orderBy, orderDirection: OrderDirection, where: GlobalPositionHourlyAggregate_filter): [GlobalPositionHourlyAggregate!]
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: CurrentLpPosition_orderBy, orderDirection: OrderDirection, where: CurrentLpPosition_filter): [CurrentLpPosition!]
  prices(skip: Int = 0, first: Int = 100, orderBy: Price_orderBy, orderDirection: OrderDirection, where: Price_filter): [Price!]!
  positions(skip: Int = 0, first: Int = 100, orderBy: CurrentPosition_orderBy, orderDirection: OrderDirection, where: CurrentPosition_filter): [CurrentPosition!]!
  fundingPayments(skip: Int = 0, first: Int = 100, orderBy: FundingPayment_orderBy, orderDirection: OrderDirection, where: FundingPayment_filter): [FundingPayment!]!
  activities(skip: Int = 0, first: Int = 100, orderBy: Activity_orderBy, orderDirection: OrderDirection, where: Activity_filter): [Activity!]!
  minuteCandles(skip: Int = 0, first: Int = 100, orderBy: MinuteCandle_orderBy, orderDirection: OrderDirection, where: MinuteCandle_filter): [MinuteCandle!]!
  fifteenMinuteCandles(skip: Int = 0, first: Int = 100, orderBy: FifteenMinuteCandle_orderBy, orderDirection: OrderDirection, where: FifteenMinuteCandle_filter): [FifteenMinuteCandle!]!
  thirtyMinuteCandles(skip: Int = 0, first: Int = 100, orderBy: ThirtyMinuteCandle_orderBy, orderDirection: OrderDirection, where: ThirtyMinuteCandle_filter): [ThirtyMinuteCandle!]!
  hourlyCandles(skip: Int = 0, first: Int = 100, orderBy: HourlyCandle_orderBy, orderDirection: OrderDirection, where: HourlyCandle_filter): [HourlyCandle!]!
  quadHourlyCandles(skip: Int = 0, first: Int = 100, orderBy: QuadHourlyCandle_orderBy, orderDirection: OrderDirection, where: QuadHourlyCandle_filter): [QuadHourlyCandle!]!
  dailyCandles(skip: Int = 0, first: Int = 100, orderBy: DailyCandle_orderBy, orderDirection: OrderDirection, where: DailyCandle_filter): [DailyCandle!]!
}

input Market_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  perpetual: Bytes
  perpetual_not: Bytes
  perpetual_gt: Bytes
  perpetual_lt: Bytes
  perpetual_gte: Bytes
  perpetual_lte: Bytes
  perpetual_in: [Bytes!]
  perpetual_not_in: [Bytes!]
  perpetual_contains: Bytes
  perpetual_not_contains: Bytes
  cryptoSwapPool: Bytes
  cryptoSwapPool_not: Bytes
  cryptoSwapPool_gt: Bytes
  cryptoSwapPool_lt: Bytes
  cryptoSwapPool_gte: Bytes
  cryptoSwapPool_lte: Bytes
  cryptoSwapPool_in: [Bytes!]
  cryptoSwapPool_not_in: [Bytes!]
  cryptoSwapPool_contains: Bytes
  cryptoSwapPool_not_contains: Bytes
  vaultAddress: Bytes
  vaultAddress_not: Bytes
  vaultAddress_gt: Bytes
  vaultAddress_lt: Bytes
  vaultAddress_gte: Bytes
  vaultAddress_lte: Bytes
  vaultAddress_in: [Bytes!]
  vaultAddress_not_in: [Bytes!]
  vaultAddress_contains: Bytes
  vaultAddress_not_contains: Bytes
  minMargin: BigInt
  minMargin_not: BigInt
  minMargin_gt: BigInt
  minMargin_lt: BigInt
  minMargin_gte: BigInt
  minMargin_lte: BigInt
  minMargin_in: [BigInt!]
  minMargin_not_in: [BigInt!]
  minMarginAtCreation: BigInt
  minMarginAtCreation_not: BigInt
  minMarginAtCreation_gt: BigInt
  minMarginAtCreation_lt: BigInt
  minMarginAtCreation_gte: BigInt
  minMarginAtCreation_lte: BigInt
  minMarginAtCreation_in: [BigInt!]
  minMarginAtCreation_not_in: [BigInt!]
  minPositiveOpenNotional: BigInt
  minPositiveOpenNotional_not: BigInt
  minPositiveOpenNotional_gt: BigInt
  minPositiveOpenNotional_lt: BigInt
  minPositiveOpenNotional_gte: BigInt
  minPositiveOpenNotional_lte: BigInt
  minPositiveOpenNotional_in: [BigInt!]
  minPositiveOpenNotional_not_in: [BigInt!]
  liquidationReward: BigInt
  liquidationReward_not: BigInt
  liquidationReward_gt: BigInt
  liquidationReward_lt: BigInt
  liquidationReward_gte: BigInt
  liquidationReward_lte: BigInt
  liquidationReward_in: [BigInt!]
  liquidationReward_not_in: [BigInt!]
  insuranceRatio: BigInt
  insuranceRatio_not: BigInt
  insuranceRatio_gt: BigInt
  insuranceRatio_lt: BigInt
  insuranceRatio_gte: BigInt
  insuranceRatio_lte: BigInt
  insuranceRatio_in: [BigInt!]
  insuranceRatio_not_in: [BigInt!]
  liquidationRewardInsuranceShare: BigInt
  liquidationRewardInsuranceShare_not: BigInt
  liquidationRewardInsuranceShare_gt: BigInt
  liquidationRewardInsuranceShare_lt: BigInt
  liquidationRewardInsuranceShare_gte: BigInt
  liquidationRewardInsuranceShare_lte: BigInt
  liquidationRewardInsuranceShare_in: [BigInt!]
  liquidationRewardInsuranceShare_not_in: [BigInt!]
  liquidationDiscount: BigInt
  liquidationDiscount_not: BigInt
  liquidationDiscount_gt: BigInt
  liquidationDiscount_lt: BigInt
  liquidationDiscount_gte: BigInt
  liquidationDiscount_lte: BigInt
  liquidationDiscount_in: [BigInt!]
  liquidationDiscount_not_in: [BigInt!]
  nonUACollSeizureDiscount: BigInt
  nonUACollSeizureDiscount_not: BigInt
  nonUACollSeizureDiscount_gt: BigInt
  nonUACollSeizureDiscount_lt: BigInt
  nonUACollSeizureDiscount_gte: BigInt
  nonUACollSeizureDiscount_lte: BigInt
  nonUACollSeizureDiscount_in: [BigInt!]
  nonUACollSeizureDiscount_not_in: [BigInt!]
  uaDebtSeizureThreshold: BigInt
  uaDebtSeizureThreshold_not: BigInt
  uaDebtSeizureThreshold_gt: BigInt
  uaDebtSeizureThreshold_lt: BigInt
  uaDebtSeizureThreshold_gte: BigInt
  uaDebtSeizureThreshold_lte: BigInt
  uaDebtSeizureThreshold_in: [BigInt!]
  uaDebtSeizureThreshold_not_in: [BigInt!]
  riskWeight: BigInt
  riskWeight_not: BigInt
  riskWeight_gt: BigInt
  riskWeight_lt: BigInt
  riskWeight_gte: BigInt
  riskWeight_lte: BigInt
  riskWeight_in: [BigInt!]
  riskWeight_not_in: [BigInt!]
  maxLiquidityProvided: BigInt
  maxLiquidityProvided_not: BigInt
  maxLiquidityProvided_gt: BigInt
  maxLiquidityProvided_lt: BigInt
  maxLiquidityProvided_gte: BigInt
  maxLiquidityProvided_lte: BigInt
  maxLiquidityProvided_in: [BigInt!]
  maxLiquidityProvided_not_in: [BigInt!]
  twapFrequency: BigInt
  twapFrequency_not: BigInt
  twapFrequency_gt: BigInt
  twapFrequency_lt: BigInt
  twapFrequency_gte: BigInt
  twapFrequency_lte: BigInt
  twapFrequency_in: [BigInt!]
  twapFrequency_not_in: [BigInt!]
  sensitivity: BigInt
  sensitivity_not: BigInt
  sensitivity_gt: BigInt
  sensitivity_lt: BigInt
  sensitivity_gte: BigInt
  sensitivity_lte: BigInt
  sensitivity_in: [BigInt!]
  sensitivity_not_in: [BigInt!]
  maxBlockTradeAmount: BigInt
  maxBlockTradeAmount_not: BigInt
  maxBlockTradeAmount_gt: BigInt
  maxBlockTradeAmount_lt: BigInt
  maxBlockTradeAmount_gte: BigInt
  maxBlockTradeAmount_lte: BigInt
  maxBlockTradeAmount_in: [BigInt!]
  maxBlockTradeAmount_not_in: [BigInt!]
  insuranceFee: BigInt
  insuranceFee_not: BigInt
  insuranceFee_gt: BigInt
  insuranceFee_lt: BigInt
  insuranceFee_gte: BigInt
  insuranceFee_lte: BigInt
  insuranceFee_in: [BigInt!]
  insuranceFee_not_in: [BigInt!]
  lpDebtCoef: BigInt
  lpDebtCoef_not: BigInt
  lpDebtCoef_gt: BigInt
  lpDebtCoef_lt: BigInt
  lpDebtCoef_gte: BigInt
  lpDebtCoef_lte: BigInt
  lpDebtCoef_in: [BigInt!]
  lpDebtCoef_not_in: [BigInt!]
  lockPeriod: BigInt
  lockPeriod_not: BigInt
  lockPeriod_gt: BigInt
  lockPeriod_lt: BigInt
  lockPeriod_gte: BigInt
  lockPeriod_lte: BigInt
  lockPeriod_in: [BigInt!]
  lockPeriod_not_in: [BigInt!]
  midFee: BigInt
  midFee_not: BigInt
  midFee_gt: BigInt
  midFee_lt: BigInt
  midFee_gte: BigInt
  midFee_lte: BigInt
  midFee_in: [BigInt!]
  midFee_not_in: [BigInt!]
  outFee: BigInt
  outFee_not: BigInt
  outFee_gt: BigInt
  outFee_lt: BigInt
  outFee_gte: BigInt
  outFee_lte: BigInt
  outFee_in: [BigInt!]
  outFee_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  latestPrice: String
  latestPrice_not: String
  latestPrice_gt: String
  latestPrice_lt: String
  latestPrice_gte: String
  latestPrice_lte: String
  latestPrice_in: [String!]
  latestPrice_not_in: [String!]
  latestPrice_contains: String
  latestPrice_contains_nocase: String
  latestPrice_not_contains: String
  latestPrice_not_contains_nocase: String
  latestPrice_starts_with: String
  latestPrice_starts_with_nocase: String
  latestPrice_not_starts_with: String
  latestPrice_not_starts_with_nocase: String
  latestPrice_ends_with: String
  latestPrice_ends_with_nocase: String
  latestPrice_not_ends_with: String
  latestPrice_not_ends_with_nocase: String
  latestPrice_: Price_filter
  earliestPrice: BigInt
  earliestPrice_not: BigInt
  earliestPrice_gt: BigInt
  earliestPrice_lt: BigInt
  earliestPrice_gte: BigInt
  earliestPrice_lte: BigInt
  earliestPrice_in: [BigInt!]
  earliestPrice_not_in: [BigInt!]
  globalPositions_: GlobalPosition_filter
  globalPositionHourlyAggregates_: GlobalPositionHourlyAggregate_filter
  liquidityPositions_: CurrentLpPosition_filter
  prices_: Price_filter
  positions_: CurrentPosition_filter
  fundingPayments_: FundingPayment_filter
  activities_: Activity_filter
  minuteCandles_: MinuteCandle_filter
  fifteenMinuteCandles_: FifteenMinuteCandle_filter
  thirtyMinuteCandles_: ThirtyMinuteCandle_filter
  hourlyCandles_: HourlyCandle_filter
  quadHourlyCandles_: QuadHourlyCandle_filter
  dailyCandles_: DailyCandle_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Market_filter]
  or: [Market_filter]
}

enum Market_orderBy {
  id
  perpetual
  cryptoSwapPool
  vaultAddress
  minMargin
  minMarginAtCreation
  minPositiveOpenNotional
  liquidationReward
  insuranceRatio
  liquidationRewardInsuranceShare
  liquidationDiscount
  nonUACollSeizureDiscount
  uaDebtSeizureThreshold
  riskWeight
  maxLiquidityProvided
  twapFrequency
  sensitivity
  maxBlockTradeAmount
  insuranceFee
  lpDebtCoef
  lockPeriod
  midFee
  outFee
  name
  symbol
  latestPrice
  latestPrice__id
  latestPrice__timestamp
  latestPrice__value
  latestPrice__mark
  latestPrice__index
  latestPrice__indexTwap
  latestPrice__fundingRate
  latestPrice__cumFundingRate
  latestPrice__cumFundingPerLpToken
  latestPrice__baseVal
  latestPrice__quoteVal
  latestPrice__priceScale
  latestPrice__priceOracle
  latestPrice__quoteSupply
  latestPrice__baseSupply
  latestPrice__virtualPrice
  earliestPrice
  globalPositions
  globalPositionHourlyAggregates
  liquidityPositions
  prices
  positions
  fundingPayments
  activities
  minuteCandles
  fifteenMinuteCandles
  thirtyMinuteCandles
  hourlyCandles
  quadHourlyCandles
  dailyCandles
}

type MinuteCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input MinuteCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MinuteCandle_filter]
  or: [MinuteCandle_filter]
}

enum MinuteCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PastLpPosition {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  closeTimestamp: BigInt!
  openNotional: BigInt!
  positionSize: BigInt!
  initialCumFundingPerLpToken: BigInt!
  weightedEntryPriceSum: BigInt!
  entryAmountSum: BigInt!
  weightedExitPriceSum: BigInt!
  exitAmountSum: BigInt!
  liquidityBalance: BigInt!
  totalTradingFeesGrowth: BigInt!
  totalQuoteFeesGrowth: BigInt!
  totalBaseFeesGrowth: BigInt!
  depositTime: BigInt!
  realizedProfit: BigInt!
  wasLiquidated: Boolean!
  liquidationFee: BigInt
  fundingPayment: BigInt!
  tradingFeesPayed: BigInt!
  initialUsdValue: BigInt!
}

input PastLpPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  openNotional: BigInt
  openNotional_not: BigInt
  openNotional_gt: BigInt
  openNotional_lt: BigInt
  openNotional_gte: BigInt
  openNotional_lte: BigInt
  openNotional_in: [BigInt!]
  openNotional_not_in: [BigInt!]
  positionSize: BigInt
  positionSize_not: BigInt
  positionSize_gt: BigInt
  positionSize_lt: BigInt
  positionSize_gte: BigInt
  positionSize_lte: BigInt
  positionSize_in: [BigInt!]
  positionSize_not_in: [BigInt!]
  initialCumFundingPerLpToken: BigInt
  initialCumFundingPerLpToken_not: BigInt
  initialCumFundingPerLpToken_gt: BigInt
  initialCumFundingPerLpToken_lt: BigInt
  initialCumFundingPerLpToken_gte: BigInt
  initialCumFundingPerLpToken_lte: BigInt
  initialCumFundingPerLpToken_in: [BigInt!]
  initialCumFundingPerLpToken_not_in: [BigInt!]
  weightedEntryPriceSum: BigInt
  weightedEntryPriceSum_not: BigInt
  weightedEntryPriceSum_gt: BigInt
  weightedEntryPriceSum_lt: BigInt
  weightedEntryPriceSum_gte: BigInt
  weightedEntryPriceSum_lte: BigInt
  weightedEntryPriceSum_in: [BigInt!]
  weightedEntryPriceSum_not_in: [BigInt!]
  entryAmountSum: BigInt
  entryAmountSum_not: BigInt
  entryAmountSum_gt: BigInt
  entryAmountSum_lt: BigInt
  entryAmountSum_gte: BigInt
  entryAmountSum_lte: BigInt
  entryAmountSum_in: [BigInt!]
  entryAmountSum_not_in: [BigInt!]
  weightedExitPriceSum: BigInt
  weightedExitPriceSum_not: BigInt
  weightedExitPriceSum_gt: BigInt
  weightedExitPriceSum_lt: BigInt
  weightedExitPriceSum_gte: BigInt
  weightedExitPriceSum_lte: BigInt
  weightedExitPriceSum_in: [BigInt!]
  weightedExitPriceSum_not_in: [BigInt!]
  exitAmountSum: BigInt
  exitAmountSum_not: BigInt
  exitAmountSum_gt: BigInt
  exitAmountSum_lt: BigInt
  exitAmountSum_gte: BigInt
  exitAmountSum_lte: BigInt
  exitAmountSum_in: [BigInt!]
  exitAmountSum_not_in: [BigInt!]
  liquidityBalance: BigInt
  liquidityBalance_not: BigInt
  liquidityBalance_gt: BigInt
  liquidityBalance_lt: BigInt
  liquidityBalance_gte: BigInt
  liquidityBalance_lte: BigInt
  liquidityBalance_in: [BigInt!]
  liquidityBalance_not_in: [BigInt!]
  totalTradingFeesGrowth: BigInt
  totalTradingFeesGrowth_not: BigInt
  totalTradingFeesGrowth_gt: BigInt
  totalTradingFeesGrowth_lt: BigInt
  totalTradingFeesGrowth_gte: BigInt
  totalTradingFeesGrowth_lte: BigInt
  totalTradingFeesGrowth_in: [BigInt!]
  totalTradingFeesGrowth_not_in: [BigInt!]
  totalQuoteFeesGrowth: BigInt
  totalQuoteFeesGrowth_not: BigInt
  totalQuoteFeesGrowth_gt: BigInt
  totalQuoteFeesGrowth_lt: BigInt
  totalQuoteFeesGrowth_gte: BigInt
  totalQuoteFeesGrowth_lte: BigInt
  totalQuoteFeesGrowth_in: [BigInt!]
  totalQuoteFeesGrowth_not_in: [BigInt!]
  totalBaseFeesGrowth: BigInt
  totalBaseFeesGrowth_not: BigInt
  totalBaseFeesGrowth_gt: BigInt
  totalBaseFeesGrowth_lt: BigInt
  totalBaseFeesGrowth_gte: BigInt
  totalBaseFeesGrowth_lte: BigInt
  totalBaseFeesGrowth_in: [BigInt!]
  totalBaseFeesGrowth_not_in: [BigInt!]
  depositTime: BigInt
  depositTime_not: BigInt
  depositTime_gt: BigInt
  depositTime_lt: BigInt
  depositTime_gte: BigInt
  depositTime_lte: BigInt
  depositTime_in: [BigInt!]
  depositTime_not_in: [BigInt!]
  realizedProfit: BigInt
  realizedProfit_not: BigInt
  realizedProfit_gt: BigInt
  realizedProfit_lt: BigInt
  realizedProfit_gte: BigInt
  realizedProfit_lte: BigInt
  realizedProfit_in: [BigInt!]
  realizedProfit_not_in: [BigInt!]
  wasLiquidated: Boolean
  wasLiquidated_not: Boolean
  wasLiquidated_in: [Boolean!]
  wasLiquidated_not_in: [Boolean!]
  liquidationFee: BigInt
  liquidationFee_not: BigInt
  liquidationFee_gt: BigInt
  liquidationFee_lt: BigInt
  liquidationFee_gte: BigInt
  liquidationFee_lte: BigInt
  liquidationFee_in: [BigInt!]
  liquidationFee_not_in: [BigInt!]
  fundingPayment: BigInt
  fundingPayment_not: BigInt
  fundingPayment_gt: BigInt
  fundingPayment_lt: BigInt
  fundingPayment_gte: BigInt
  fundingPayment_lte: BigInt
  fundingPayment_in: [BigInt!]
  fundingPayment_not_in: [BigInt!]
  tradingFeesPayed: BigInt
  tradingFeesPayed_not: BigInt
  tradingFeesPayed_gt: BigInt
  tradingFeesPayed_lt: BigInt
  tradingFeesPayed_gte: BigInt
  tradingFeesPayed_lte: BigInt
  tradingFeesPayed_in: [BigInt!]
  tradingFeesPayed_not_in: [BigInt!]
  initialUsdValue: BigInt
  initialUsdValue_not: BigInt
  initialUsdValue_gt: BigInt
  initialUsdValue_lt: BigInt
  initialUsdValue_gte: BigInt
  initialUsdValue_lte: BigInt
  initialUsdValue_in: [BigInt!]
  initialUsdValue_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PastLpPosition_filter]
  or: [PastLpPosition_filter]
}

enum PastLpPosition_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  closeTimestamp
  openNotional
  positionSize
  initialCumFundingPerLpToken
  weightedEntryPriceSum
  entryAmountSum
  weightedExitPriceSum
  exitAmountSum
  liquidityBalance
  totalTradingFeesGrowth
  totalQuoteFeesGrowth
  totalBaseFeesGrowth
  depositTime
  realizedProfit
  wasLiquidated
  liquidationFee
  fundingPayment
  tradingFeesPayed
  initialUsdValue
}

type PastPosition {
  id: ID!
  market: Market!
  user: User!
  timestamp: BigInt!
  closeTimestamp: BigInt
  direction: Int!
  marginRatio: BigInt!
  openNotional: BigInt!
  positionSize: BigInt!
  initialCumFundingRate: BigInt!
  entryPrice: BigInt!
  wasLiquidated: Boolean!
  liquidationFee: BigInt
  realizedProfit: BigInt!
  insurancePayed: BigInt!
  tradingFeesPayed: BigInt!
  fundingPayment: BigInt!
}

input PastPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  direction: Int
  direction_not: Int
  direction_gt: Int
  direction_lt: Int
  direction_gte: Int
  direction_lte: Int
  direction_in: [Int!]
  direction_not_in: [Int!]
  marginRatio: BigInt
  marginRatio_not: BigInt
  marginRatio_gt: BigInt
  marginRatio_lt: BigInt
  marginRatio_gte: BigInt
  marginRatio_lte: BigInt
  marginRatio_in: [BigInt!]
  marginRatio_not_in: [BigInt!]
  openNotional: BigInt
  openNotional_not: BigInt
  openNotional_gt: BigInt
  openNotional_lt: BigInt
  openNotional_gte: BigInt
  openNotional_lte: BigInt
  openNotional_in: [BigInt!]
  openNotional_not_in: [BigInt!]
  positionSize: BigInt
  positionSize_not: BigInt
  positionSize_gt: BigInt
  positionSize_lt: BigInt
  positionSize_gte: BigInt
  positionSize_lte: BigInt
  positionSize_in: [BigInt!]
  positionSize_not_in: [BigInt!]
  initialCumFundingRate: BigInt
  initialCumFundingRate_not: BigInt
  initialCumFundingRate_gt: BigInt
  initialCumFundingRate_lt: BigInt
  initialCumFundingRate_gte: BigInt
  initialCumFundingRate_lte: BigInt
  initialCumFundingRate_in: [BigInt!]
  initialCumFundingRate_not_in: [BigInt!]
  entryPrice: BigInt
  entryPrice_not: BigInt
  entryPrice_gt: BigInt
  entryPrice_lt: BigInt
  entryPrice_gte: BigInt
  entryPrice_lte: BigInt
  entryPrice_in: [BigInt!]
  entryPrice_not_in: [BigInt!]
  wasLiquidated: Boolean
  wasLiquidated_not: Boolean
  wasLiquidated_in: [Boolean!]
  wasLiquidated_not_in: [Boolean!]
  liquidationFee: BigInt
  liquidationFee_not: BigInt
  liquidationFee_gt: BigInt
  liquidationFee_lt: BigInt
  liquidationFee_gte: BigInt
  liquidationFee_lte: BigInt
  liquidationFee_in: [BigInt!]
  liquidationFee_not_in: [BigInt!]
  realizedProfit: BigInt
  realizedProfit_not: BigInt
  realizedProfit_gt: BigInt
  realizedProfit_lt: BigInt
  realizedProfit_gte: BigInt
  realizedProfit_lte: BigInt
  realizedProfit_in: [BigInt!]
  realizedProfit_not_in: [BigInt!]
  insurancePayed: BigInt
  insurancePayed_not: BigInt
  insurancePayed_gt: BigInt
  insurancePayed_lt: BigInt
  insurancePayed_gte: BigInt
  insurancePayed_lte: BigInt
  insurancePayed_in: [BigInt!]
  insurancePayed_not_in: [BigInt!]
  tradingFeesPayed: BigInt
  tradingFeesPayed_not: BigInt
  tradingFeesPayed_gt: BigInt
  tradingFeesPayed_lt: BigInt
  tradingFeesPayed_gte: BigInt
  tradingFeesPayed_lte: BigInt
  tradingFeesPayed_in: [BigInt!]
  tradingFeesPayed_not_in: [BigInt!]
  fundingPayment: BigInt
  fundingPayment_not: BigInt
  fundingPayment_gt: BigInt
  fundingPayment_lt: BigInt
  fundingPayment_gte: BigInt
  fundingPayment_lte: BigInt
  fundingPayment_in: [BigInt!]
  fundingPayment_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PastPosition_filter]
  or: [PastPosition_filter]
}

enum PastPosition_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  user
  user__id
  user__tradingVolume
  timestamp
  closeTimestamp
  direction
  marginRatio
  openNotional
  positionSize
  initialCumFundingRate
  entryPrice
  wasLiquidated
  liquidationFee
  realizedProfit
  insurancePayed
  tradingFeesPayed
  fundingPayment
}

type PastTokenBalance {
  id: ID!
  user: User!
  token: Token!
  amount: BigInt!
  timestamp: BigInt!
  closeTimestamp: BigInt!
}

input PastTokenBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PastTokenBalance_filter]
  or: [PastTokenBalance_filter]
}

enum PastTokenBalance_orderBy {
  id
  user
  user__id
  user__tradingVolume
  token
  token__id
  token__address
  token__name
  token__symbol
  token__aggregator
  token__decimals
  token__weight
  token__maxAmount
  token__depositedAmount
  token__uniqueDepositors
  amount
  timestamp
  closeTimestamp
}

type Price {
  id: ID!
  market: Market!
  timestamp: BigInt!
  value: BigInt!
  mark: BigInt!
  index: BigInt!
  indexTwap: BigInt!
  fundingRate: BigInt!
  cumFundingRate: BigInt!
  cumFundingPerLpToken: BigInt!
  baseVal: BigInt!
  quoteVal: BigInt!
  priceScale: BigInt!
  priceOracle: BigInt!
  quoteSupply: BigInt!
  baseSupply: BigInt!
  virtualPrice: BigInt!
}

input Price_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  mark: BigInt
  mark_not: BigInt
  mark_gt: BigInt
  mark_lt: BigInt
  mark_gte: BigInt
  mark_lte: BigInt
  mark_in: [BigInt!]
  mark_not_in: [BigInt!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  indexTwap: BigInt
  indexTwap_not: BigInt
  indexTwap_gt: BigInt
  indexTwap_lt: BigInt
  indexTwap_gte: BigInt
  indexTwap_lte: BigInt
  indexTwap_in: [BigInt!]
  indexTwap_not_in: [BigInt!]
  fundingRate: BigInt
  fundingRate_not: BigInt
  fundingRate_gt: BigInt
  fundingRate_lt: BigInt
  fundingRate_gte: BigInt
  fundingRate_lte: BigInt
  fundingRate_in: [BigInt!]
  fundingRate_not_in: [BigInt!]
  cumFundingRate: BigInt
  cumFundingRate_not: BigInt
  cumFundingRate_gt: BigInt
  cumFundingRate_lt: BigInt
  cumFundingRate_gte: BigInt
  cumFundingRate_lte: BigInt
  cumFundingRate_in: [BigInt!]
  cumFundingRate_not_in: [BigInt!]
  cumFundingPerLpToken: BigInt
  cumFundingPerLpToken_not: BigInt
  cumFundingPerLpToken_gt: BigInt
  cumFundingPerLpToken_lt: BigInt
  cumFundingPerLpToken_gte: BigInt
  cumFundingPerLpToken_lte: BigInt
  cumFundingPerLpToken_in: [BigInt!]
  cumFundingPerLpToken_not_in: [BigInt!]
  baseVal: BigInt
  baseVal_not: BigInt
  baseVal_gt: BigInt
  baseVal_lt: BigInt
  baseVal_gte: BigInt
  baseVal_lte: BigInt
  baseVal_in: [BigInt!]
  baseVal_not_in: [BigInt!]
  quoteVal: BigInt
  quoteVal_not: BigInt
  quoteVal_gt: BigInt
  quoteVal_lt: BigInt
  quoteVal_gte: BigInt
  quoteVal_lte: BigInt
  quoteVal_in: [BigInt!]
  quoteVal_not_in: [BigInt!]
  priceScale: BigInt
  priceScale_not: BigInt
  priceScale_gt: BigInt
  priceScale_lt: BigInt
  priceScale_gte: BigInt
  priceScale_lte: BigInt
  priceScale_in: [BigInt!]
  priceScale_not_in: [BigInt!]
  priceOracle: BigInt
  priceOracle_not: BigInt
  priceOracle_gt: BigInt
  priceOracle_lt: BigInt
  priceOracle_gte: BigInt
  priceOracle_lte: BigInt
  priceOracle_in: [BigInt!]
  priceOracle_not_in: [BigInt!]
  quoteSupply: BigInt
  quoteSupply_not: BigInt
  quoteSupply_gt: BigInt
  quoteSupply_lt: BigInt
  quoteSupply_gte: BigInt
  quoteSupply_lte: BigInt
  quoteSupply_in: [BigInt!]
  quoteSupply_not_in: [BigInt!]
  baseSupply: BigInt
  baseSupply_not: BigInt
  baseSupply_gt: BigInt
  baseSupply_lt: BigInt
  baseSupply_gte: BigInt
  baseSupply_lte: BigInt
  baseSupply_in: [BigInt!]
  baseSupply_not_in: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Price_filter]
  or: [Price_filter]
}

enum Price_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  timestamp
  value
  mark
  index
  indexTwap
  fundingRate
  cumFundingRate
  cumFundingPerLpToken
  baseVal
  quoteVal
  priceScale
  priceOracle
  quoteSupply
  baseSupply
  virtualPrice
}

type QuadHourlyCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input QuadHourlyCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [QuadHourlyCandle_filter]
  or: [QuadHourlyCandle_filter]
}

enum QuadHourlyCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

type Query {
  globalMetricStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalMetricStore
  globalMetricStores(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalMetricStore_orderBy
    orderDirection: OrderDirection
    where: GlobalMetricStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalMetricStore!]!
  totalTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalTVL
  totalTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalTVL_orderBy
    orderDirection: OrderDirection
    where: TotalTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalTVL!]!
  tvlHourlyAggregate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TvlHourlyAggregate
  tvlHourlyAggregates(
    skip: Int = 0
    first: Int = 100
    orderBy: TvlHourlyAggregate_orderBy
    orderDirection: OrderDirection
    where: TvlHourlyAggregate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TvlHourlyAggregate!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  globalPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalPosition
  globalPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalPosition_orderBy
    orderDirection: OrderDirection
    where: GlobalPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalPosition!]!
  globalPositionHourlyAggregate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalPositionHourlyAggregate
  globalPositionHourlyAggregates(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalPositionHourlyAggregate_orderBy
    orderDirection: OrderDirection
    where: GlobalPositionHourlyAggregate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalPositionHourlyAggregate!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  currentLpPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentLpPosition
  currentLpPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentLpPosition_orderBy
    orderDirection: OrderDirection
    where: CurrentLpPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentLpPosition!]!
  pastLpPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastLpPosition
  pastLpPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: PastLpPosition_orderBy
    orderDirection: OrderDirection
    where: PastLpPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastLpPosition!]!
  currentPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentPosition
  currentPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentPosition_orderBy
    orderDirection: OrderDirection
    where: CurrentPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentPosition!]!
  pastPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastPosition
  pastPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: PastPosition_orderBy
    orderDirection: OrderDirection
    where: PastPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastPosition!]!
  fundingPayment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingPayment
  fundingPayments(
    skip: Int = 0
    first: Int = 100
    orderBy: FundingPayment_orderBy
    orderDirection: OrderDirection
    where: FundingPayment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FundingPayment!]!
  activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  price(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Price
  prices(
    skip: Int = 0
    first: Int = 100
    orderBy: Price_orderBy
    orderDirection: OrderDirection
    where: Price_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Price!]!
  vault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  reserveToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveToken
  reserveTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveToken_orderBy
    orderDirection: OrderDirection
    where: ReserveToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveToken!]!
  currentTokenBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentTokenBalance
  currentTokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentTokenBalance_orderBy
    orderDirection: OrderDirection
    where: CurrentTokenBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentTokenBalance!]!
  pastTokenBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastTokenBalance
  pastTokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: PastTokenBalance_orderBy
    orderDirection: OrderDirection
    where: PastTokenBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastTokenBalance!]!
  answerUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AnswerUpdated
  answerUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AnswerUpdated_orderBy
    orderDirection: OrderDirection
    where: AnswerUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AnswerUpdated!]!
  minuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinuteCandle
  minuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinuteCandle_orderBy
    orderDirection: OrderDirection
    where: MinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinuteCandle!]!
  fifteenMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FifteenMinuteCandle
  fifteenMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: FifteenMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: FifteenMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FifteenMinuteCandle!]!
  thirtyMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ThirtyMinuteCandle
  thirtyMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: ThirtyMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: ThirtyMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ThirtyMinuteCandle!]!
  hourlyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyCandle
  hourlyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyCandle_orderBy
    orderDirection: OrderDirection
    where: HourlyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyCandle!]!
  quadHourlyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): QuadHourlyCandle
  quadHourlyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: QuadHourlyCandle_orderBy
    orderDirection: OrderDirection
    where: QuadHourlyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [QuadHourlyCandle!]!
  dailyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyCandle
  dailyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyCandle_orderBy
    orderDirection: OrderDirection
    where: DailyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyCandle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type ReserveToken {
  id: ID!
  address: Bytes!
  name: String!
  tokenIdx: BigInt!
  symbol: String!
  decimals: BigInt!
  mintCap: BigInt!
}

input ReserveToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  tokenIdx: BigInt
  tokenIdx_not: BigInt
  tokenIdx_gt: BigInt
  tokenIdx_lt: BigInt
  tokenIdx_gte: BigInt
  tokenIdx_lte: BigInt
  tokenIdx_in: [BigInt!]
  tokenIdx_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  mintCap: BigInt
  mintCap_not: BigInt
  mintCap_gt: BigInt
  mintCap_lt: BigInt
  mintCap_gte: BigInt
  mintCap_lte: BigInt
  mintCap_in: [BigInt!]
  mintCap_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReserveToken_filter]
  or: [ReserveToken_filter]
}

enum ReserveToken_orderBy {
  id
  address
  name
  tokenIdx
  symbol
  decimals
  mintCap
}

type Subscription {
  globalMetricStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalMetricStore
  globalMetricStores(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalMetricStore_orderBy
    orderDirection: OrderDirection
    where: GlobalMetricStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalMetricStore!]!
  totalTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalTVL
  totalTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalTVL_orderBy
    orderDirection: OrderDirection
    where: TotalTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalTVL!]!
  tvlHourlyAggregate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TvlHourlyAggregate
  tvlHourlyAggregates(
    skip: Int = 0
    first: Int = 100
    orderBy: TvlHourlyAggregate_orderBy
    orderDirection: OrderDirection
    where: TvlHourlyAggregate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TvlHourlyAggregate!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  globalPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalPosition
  globalPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalPosition_orderBy
    orderDirection: OrderDirection
    where: GlobalPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalPosition!]!
  globalPositionHourlyAggregate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalPositionHourlyAggregate
  globalPositionHourlyAggregates(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalPositionHourlyAggregate_orderBy
    orderDirection: OrderDirection
    where: GlobalPositionHourlyAggregate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalPositionHourlyAggregate!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  currentLpPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentLpPosition
  currentLpPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentLpPosition_orderBy
    orderDirection: OrderDirection
    where: CurrentLpPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentLpPosition!]!
  pastLpPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastLpPosition
  pastLpPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: PastLpPosition_orderBy
    orderDirection: OrderDirection
    where: PastLpPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastLpPosition!]!
  currentPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentPosition
  currentPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentPosition_orderBy
    orderDirection: OrderDirection
    where: CurrentPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentPosition!]!
  pastPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastPosition
  pastPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: PastPosition_orderBy
    orderDirection: OrderDirection
    where: PastPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastPosition!]!
  fundingPayment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingPayment
  fundingPayments(
    skip: Int = 0
    first: Int = 100
    orderBy: FundingPayment_orderBy
    orderDirection: OrderDirection
    where: FundingPayment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FundingPayment!]!
  activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  price(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Price
  prices(
    skip: Int = 0
    first: Int = 100
    orderBy: Price_orderBy
    orderDirection: OrderDirection
    where: Price_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Price!]!
  vault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  reserveToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveToken
  reserveTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveToken_orderBy
    orderDirection: OrderDirection
    where: ReserveToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveToken!]!
  currentTokenBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentTokenBalance
  currentTokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentTokenBalance_orderBy
    orderDirection: OrderDirection
    where: CurrentTokenBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentTokenBalance!]!
  pastTokenBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PastTokenBalance
  pastTokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: PastTokenBalance_orderBy
    orderDirection: OrderDirection
    where: PastTokenBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PastTokenBalance!]!
  answerUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AnswerUpdated
  answerUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: AnswerUpdated_orderBy
    orderDirection: OrderDirection
    where: AnswerUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AnswerUpdated!]!
  minuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinuteCandle
  minuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinuteCandle_orderBy
    orderDirection: OrderDirection
    where: MinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinuteCandle!]!
  fifteenMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FifteenMinuteCandle
  fifteenMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: FifteenMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: FifteenMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FifteenMinuteCandle!]!
  thirtyMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ThirtyMinuteCandle
  thirtyMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: ThirtyMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: ThirtyMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ThirtyMinuteCandle!]!
  hourlyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyCandle
  hourlyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyCandle_orderBy
    orderDirection: OrderDirection
    where: HourlyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyCandle!]!
  quadHourlyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): QuadHourlyCandle
  quadHourlyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: QuadHourlyCandle_orderBy
    orderDirection: OrderDirection
    where: QuadHourlyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [QuadHourlyCandle!]!
  dailyCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyCandle
  dailyCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyCandle_orderBy
    orderDirection: OrderDirection
    where: DailyCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyCandle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type ThirtyMinuteCandle {
  id: ID!
  market: Market!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  high: BigInt!
  low: BigInt!
  open: BigInt!
  close: BigInt!
  volume: BigInt!
  lastPrice: Price!
}

input ThirtyMinuteCandle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  lastPrice: String
  lastPrice_not: String
  lastPrice_gt: String
  lastPrice_lt: String
  lastPrice_gte: String
  lastPrice_lte: String
  lastPrice_in: [String!]
  lastPrice_not_in: [String!]
  lastPrice_contains: String
  lastPrice_contains_nocase: String
  lastPrice_not_contains: String
  lastPrice_not_contains_nocase: String
  lastPrice_starts_with: String
  lastPrice_starts_with_nocase: String
  lastPrice_not_starts_with: String
  lastPrice_not_starts_with_nocase: String
  lastPrice_ends_with: String
  lastPrice_ends_with_nocase: String
  lastPrice_not_ends_with: String
  lastPrice_not_ends_with_nocase: String
  lastPrice_: Price_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ThirtyMinuteCandle_filter]
  or: [ThirtyMinuteCandle_filter]
}

enum ThirtyMinuteCandle_orderBy {
  id
  market
  market__id
  market__perpetual
  market__cryptoSwapPool
  market__vaultAddress
  market__minMargin
  market__minMarginAtCreation
  market__minPositiveOpenNotional
  market__liquidationReward
  market__insuranceRatio
  market__liquidationRewardInsuranceShare
  market__liquidationDiscount
  market__nonUACollSeizureDiscount
  market__uaDebtSeizureThreshold
  market__riskWeight
  market__maxLiquidityProvided
  market__twapFrequency
  market__sensitivity
  market__maxBlockTradeAmount
  market__insuranceFee
  market__lpDebtCoef
  market__lockPeriod
  market__midFee
  market__outFee
  market__name
  market__symbol
  market__earliestPrice
  openTimestamp
  closeTimestamp
  high
  low
  open
  close
  volume
  lastPrice
  lastPrice__id
  lastPrice__timestamp
  lastPrice__value
  lastPrice__mark
  lastPrice__index
  lastPrice__indexTwap
  lastPrice__fundingRate
  lastPrice__cumFundingRate
  lastPrice__cumFundingPerLpToken
  lastPrice__baseVal
  lastPrice__quoteVal
  lastPrice__priceScale
  lastPrice__priceOracle
  lastPrice__quoteSupply
  lastPrice__baseSupply
  lastPrice__virtualPrice
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: ID!
  address: Bytes!
  name: String!
  symbol: String!
  vault: Vault!
  aggregator: Bytes!
  decimals: BigInt!
  weight: BigInt!
  maxAmount: BigInt!
  depositedAmount: BigInt!
  uniqueDepositors: BigInt!
  prices(skip: Int = 0, first: Int = 100, orderBy: AnswerUpdated_orderBy, orderDirection: OrderDirection, where: AnswerUpdated_filter): [AnswerUpdated!]!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  aggregator: Bytes
  aggregator_not: Bytes
  aggregator_gt: Bytes
  aggregator_lt: Bytes
  aggregator_gte: Bytes
  aggregator_lte: Bytes
  aggregator_in: [Bytes!]
  aggregator_not_in: [Bytes!]
  aggregator_contains: Bytes
  aggregator_not_contains: Bytes
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  weight: BigInt
  weight_not: BigInt
  weight_gt: BigInt
  weight_lt: BigInt
  weight_gte: BigInt
  weight_lte: BigInt
  weight_in: [BigInt!]
  weight_not_in: [BigInt!]
  maxAmount: BigInt
  maxAmount_not: BigInt
  maxAmount_gt: BigInt
  maxAmount_lt: BigInt
  maxAmount_gte: BigInt
  maxAmount_lte: BigInt
  maxAmount_in: [BigInt!]
  maxAmount_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_not: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_lt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_not_in: [BigInt!]
  uniqueDepositors: BigInt
  uniqueDepositors_not: BigInt
  uniqueDepositors_gt: BigInt
  uniqueDepositors_lt: BigInt
  uniqueDepositors_gte: BigInt
  uniqueDepositors_lte: BigInt
  uniqueDepositors_in: [BigInt!]
  uniqueDepositors_not_in: [BigInt!]
  prices_: AnswerUpdated_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  address
  name
  symbol
  vault
  vault__id
  vault__oracle
  aggregator
  decimals
  weight
  maxAmount
  depositedAmount
  uniqueDepositors
  prices
}

type TotalTVL {
  id: ID!
  timestamp: BigInt!
  amount: BigInt!
}

input TotalTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TotalTVL_filter]
  or: [TotalTVL_filter]
}

enum TotalTVL_orderBy {
  id
  timestamp
  amount
}

type TvlHourlyAggregate {
  id: ID!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  amount: BigInt!
}

input TvlHourlyAggregate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  openTimestamp: BigInt
  openTimestamp_not: BigInt
  openTimestamp_gt: BigInt
  openTimestamp_lt: BigInt
  openTimestamp_gte: BigInt
  openTimestamp_lte: BigInt
  openTimestamp_in: [BigInt!]
  openTimestamp_not_in: [BigInt!]
  closeTimestamp: BigInt
  closeTimestamp_not: BigInt
  closeTimestamp_gt: BigInt
  closeTimestamp_lt: BigInt
  closeTimestamp_gte: BigInt
  closeTimestamp_lte: BigInt
  closeTimestamp_in: [BigInt!]
  closeTimestamp_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TvlHourlyAggregate_filter]
  or: [TvlHourlyAggregate_filter]
}

enum TvlHourlyAggregate_orderBy {
  id
  openTimestamp
  closeTimestamp
  amount
}

type User {
  id: ID!
  tradingVolume: BigInt!
  currentPositions(skip: Int = 0, first: Int = 100, orderBy: CurrentPosition_orderBy, orderDirection: OrderDirection, where: CurrentPosition_filter): [CurrentPosition!]!
  pastPositions(skip: Int = 0, first: Int = 100, orderBy: PastPosition_orderBy, orderDirection: OrderDirection, where: PastPosition_filter): [PastPosition!]!
  currentLpPositions(skip: Int = 0, first: Int = 100, orderBy: CurrentLpPosition_orderBy, orderDirection: OrderDirection, where: CurrentLpPosition_filter): [CurrentLpPosition!]!
  pastLpPositions(skip: Int = 0, first: Int = 100, orderBy: PastLpPosition_orderBy, orderDirection: OrderDirection, where: PastLpPosition_filter): [PastLpPosition!]!
  currentTokenBalances(skip: Int = 0, first: Int = 100, orderBy: CurrentTokenBalance_orderBy, orderDirection: OrderDirection, where: CurrentTokenBalance_filter): [CurrentTokenBalance!]!
  pastTokenBalances(skip: Int = 0, first: Int = 100, orderBy: PastTokenBalance_orderBy, orderDirection: OrderDirection, where: PastTokenBalance_filter): [PastTokenBalance!]!
  liquidation(skip: Int = 0, first: Int = 100, orderBy: Liquidation_orderBy, orderDirection: OrderDirection, where: Liquidation_filter): [Liquidation!]!
  activities(skip: Int = 0, first: Int = 100, orderBy: Activity_orderBy, orderDirection: OrderDirection, where: Activity_filter): [Activity!]!
  fundingPayments(skip: Int = 0, first: Int = 100, orderBy: FundingPayment_orderBy, orderDirection: OrderDirection, where: FundingPayment_filter): [FundingPayment!]!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tradingVolume: BigInt
  tradingVolume_not: BigInt
  tradingVolume_gt: BigInt
  tradingVolume_lt: BigInt
  tradingVolume_gte: BigInt
  tradingVolume_lte: BigInt
  tradingVolume_in: [BigInt!]
  tradingVolume_not_in: [BigInt!]
  currentPositions_: CurrentPosition_filter
  pastPositions_: PastPosition_filter
  currentLpPositions_: CurrentLpPosition_filter
  pastLpPositions_: PastLpPosition_filter
  currentTokenBalances_: CurrentTokenBalance_filter
  pastTokenBalances_: PastTokenBalance_filter
  liquidation_: Liquidation_filter
  activities_: Activity_filter
  fundingPayments_: FundingPayment_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  tradingVolume
  currentPositions
  pastPositions
  currentLpPositions
  pastLpPositions
  currentTokenBalances
  pastTokenBalances
  liquidation
  activities
  fundingPayments
}

type Vault {
  id: ID!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  oracle: String!
}

input Vault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens_: Token_filter
  oracle: String
  oracle_not: String
  oracle_gt: String
  oracle_lt: String
  oracle_gte: String
  oracle_lte: String
  oracle_in: [String!]
  oracle_not_in: [String!]
  oracle_contains: String
  oracle_contains_nocase: String
  oracle_not_contains: String
  oracle_not_contains_nocase: String
  oracle_starts_with: String
  oracle_starts_with_nocase: String
  oracle_not_starts_with: String
  oracle_not_starts_with_nocase: String
  oracle_ends_with: String
  oracle_ends_with_nocase: String
  oracle_not_ends_with: String
  oracle_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vault_filter]
  or: [Vault_filter]
}

enum Vault_orderBy {
  id
  tokens
  oracle
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}